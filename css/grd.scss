//flexible layout framework
//params
$grd_bases: 1 2 3 4 5 6 8 9 10 12; //grid width fraction denominators to support
//params - gutter - vertical and horizontal separating columns (should be >= 0)
$grd_gutters: ( xs: 0.5rem, sm: 1rem, md: 2rem, lg: 4rem, xl: 8rem );
//params - responsive
$grd_breakpoints: ( sm: 768px, md: 992px, lg: 1200px );
//row
.grd-row {
  display: flex;
  align-items: stretch;
  box-sizing: border-box;
  flex-wrap: wrap;
  //width: 100%;
  //> .grd-row:not([class*=' grd-col-']):not([class^='grd-col-']) {
  //	display: inline-flex;
  //	width: auto;
  //}
}
.grd-row-inline {
  @extend .grd-row;
  align-items: center;
  > * {
    @extend .grd-col-inline;
  }
}
//gutter
.grd-row,
.grd-row-inline {
  @each $name, $value in $grd_gutters {
    &.grd-gutter-#{$name} {
      margin: -$value/2;

      > [class*=' grd-col-'],
      > [class^='grd-col-'],
      > .grd-col-auto,
      > .grd-col-inline {
        margin: $value/2;
      }
    }
  }
}
//column
[class*=' grd-col-'],
[class^='grd-col-'],
.grd-col-inline {
  box-sizing: border-box;
  flex-grow: 0;
  flex-shrink: 0;
  //display: inline-flex;
  //align-items: stretch;
  &:not([class*=' grd-row']) {
    //if element is both column *and* row
    //flex-direction: column;
  }
}
//dynamically generate grid widths as all natural fractions with denominators from grd_bases
@each $base in $grd_bases {
  @media all and (min-width: #{map-get($grd_breakpoints, lg)}) {
    @for $n from 1 through $base {
      .grd-col-#{$n}-#{$base} {
        width: percentage($n / $base);
      }
      @each $name, $value in $grd_gutters {
        .grd-gutter-#{$name} {
          .grd-col-#{$n}-#{$base} {
            width: calc(#{percentage($n / $base)} - #{$value});
          }
        }
      }
    }
  }
}
//dynamically generate breakpoint-specific widths
@each $bpname,
$bpvalue in $grd_breakpoints {
  @media all and (min-width: #{$bpvalue}) {
    @each $base in $grd_bases {
      @for $n from 1 through $base {
        .grd-col-#{$bpname}-#{$n}-#{$base} {
          width: percentage($n / $base);
          }
          @each $name, $value in $grd_gutters {
            .grd-gutter-#{$name} {
              .grd-col-#{$bpname}-#{$n}-#{$base} {
                width: calc(#{percentage($n / $base)} - #{$value});
              }
            }
          }
      }
    }
  }
}
@media all and (max-width: 1199px) {
  [class*=' grd-col-'],
  [class^='grd-col-'],
  .grd-col-inline {
    width: 100%;
  }
}
.grd-col-auto {
  //column which takes up entire remaining free space (width) in the row
  flex-grow: 1;
  flex-shrink: 1;
  width: auto;
}
.grd-col-inline {
  //semantics for grd-col with no set width (takes up width according to its content). These columns may flow into multiple rows dynamically - use only when that's appropriate
}
//general element
.grd-width-auto {
  //element takes up entire free space (width) in the row
  flex-grow: 2;
  flex-shrink: 2;
  width: auto;
}
//general utility
.grd-justify-end {
  justify-content: flex-end;
}
.grd-justify-center {
  justify-content: center;
}
.grd-dir-column {
  flex-direction: column;
  justify-content: center;
  align-items: stretch;
}
.grd-stretch {
  align-items: stretch;
}
.grd-nowrap {
  flex-wrap: nowrap;
}
.grd-pull-right {
  margin-left: auto !important;
}
.grd-pull-left {
  margin-right: auto !important;
}
.grd-align-end {
  display: flex;
  align-items: flex-end;
}
.grd-align-center {
  display: flex;
  align-items: center;
}
.grd-center {
  display: flex;
  align-items: center;
  justify-content: center;
}
